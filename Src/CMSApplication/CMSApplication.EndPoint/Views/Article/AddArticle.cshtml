@using CMSApplication.EndPoint.Models.SiteViewModels.ArticleViewModels


@model AddArticleViewModel


@{
    ViewData["Title"] = "Add Article";
}






<div class="container">

    <div class="row heading-page">
        <div class="col-12">



            <div class="card">
                <div class="card-body">

                    <form method="post" asp-controller="Article" asp-action="AddArticle" enctype="multipart/form-data" id="articleForm">

                        <span class="text-danger">@Html.ValidationSummary()</span>

                        <div class="form-group row">
                            <div class="col-sm-12">
                                <input type="text" class="form-control" id="Title" placeholder="Article Title Here ..." asp-for="ArticleInof.Title">
                            </div>
                        </div>



                        <div class="form-group">
                            <textarea id="MainContent" asp-for="ArticleInof.Body">
                            </textarea>
                        </div>



                        <div class="form-group row">
                            <div class="col-sm-12">
                                <div class="input-group mb-3">
                                    <div class="input-group-prepend">
                                        <span class="input-group-text">Upload</span>
                                    </div>
                                    <div class="custom-file">
                                        <input accept="image/*" type="file" class="custom-file-input" id="mainImage" asp-for="ArticleInof.MainImage">
                                        <label class="custom-file-label" for="inputGroupFile01">Article Main Image</label>
                                    </div>
                                </div>
                            </div>
                        </div>


                        <div class="form-group row">
                            <div class="col-sm-12">
                                <textarea class="form-control" id="Summary" placeholder="Article Summary Here ..." asp-for="ArticleInof.Summary">
                                    </textarea>
                            </div>
                        </div>


                        <div class="form-group row">
                            <div class="col-sm-12">
                                <select class="form-control" id="categorySelect" asp-items="@ViewBag.categories" asp-for="ArticleInof.Category">
                                </select>
                            </div>
                        </div>

                        <hr>


                        <div class="form-group m-b-0 text-right">
                            <button type="submit" class="btn btn-info waves-effect waves-light">Save</button>
                            <a asp-controller="Home" asp-action="Index" class="btn btn-dark waves-effect waves-light">Cancel</a>
                        </div>


                    </form>
                </div>
            </div>





        </div>
    </div>

</div>



@section Scripts {

<script src="https://cdn.ckeditor.com/ckeditor5/22.0.0/classic/ckeditor.js"></script>





<script>












                     docReady(function () {
        var myEditor = null;
        // DOM is loaded and ready for manipulation here
        ClassicEditor
            .create(document.querySelector("#MainContent"), {
                height: 400,
                language : 'fa',
                extraPlugins: [MyCustomUploadAdapterPlugin]
            })
            .then(editor => {
                myEditor = editor;
            })
            .catch(error => {
                console.error(error);
            });
    });
    function docReady(fn) {
        // see if DOM is already available
        if (document.readyState === "complete" || document.readyState === "interactive") {
            // call on next available tick
            setTimeout(fn, 1);
        } else {
            document.addEventListener("DOMContentLoaded", fn);
        }
    }
    function MyCustomUploadAdapterPlugin(editor) {
        editor.plugins.get('FileRepository').createUploadAdapter = (loader) => {
            // Configure the URL to the upload script in your back-end here!
            return new MyUploadAdapter(loader);
        };
    }
    class MyUploadAdapter {
        constructor(loader) {
            // The file loader instance to use during the upload.
            this.loader = loader;
        }
        // Starts the upload process.
        upload() {
            return this.loader.file
                .then(file => new Promise((resolve, reject) => {
                    this._initRequest();
                    this._initListeners(resolve, reject, file);
                    this._sendRequest(file);
                }));
        }
        // Aborts the upload process.
        abort() {
            if (this.xhr) {
                this.xhr.abort();
            }
        }
        // Initializes the XMLHttpRequest object using the URL passed to the constructor.
        _initRequest() {
            const xhr = this.xhr = new XMLHttpRequest();
            // Note that your request may look different. It is up to you and your editor
            // integration to choose the right communication channel. This example uses
            // a POST request with JSON as a data structure but your configuration
            // could be different.
            xhr.open('POST', '/Article/UploadCkEditorImage', true);
            xhr.responseType = 'json';
        }
        // Initializes XMLHttpRequest listeners.
        _initListeners(resolve, reject, file) {
            const xhr = this.xhr;
            const loader = this.loader;
            const genericErrorText = `Couldn't upload file: ${file.name}.`;
            xhr.addEventListener('error', () => reject(genericErrorText));
            xhr.addEventListener('abort', () => reject());
            xhr.addEventListener('load', () => {
                const response = xhr.response;
                if (!response || response.error) {
                    return reject(response && response.error ? response.error.message : genericErrorText);
                }
                resolve({
                    default: response.url
                });
            });
            if (xhr.upload) {
                xhr.upload.addEventListener('progress', evt => {
                    if (evt.lengthComputable) {
                        loader.uploadTotal = evt.total;
                        loader.uploaded = evt.loaded;
                    }
                });
            }
        }
        _sendRequest(file) {
            const data = new FormData();
            data.append('upload', file);
            this.xhr.send(data);
        }
    }


















</script>










}